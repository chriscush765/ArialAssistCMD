// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1923.NewArial_Assist;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import java.util.Vector;
import org.firstrobotics1923.util.*;
import org.usfirst.frc1923.NewArial_Assist.subsystems.*;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DigitalInput compressorSafety = new DigitalInput(1, 7);
    public static Relay compressorSpike = new Relay(1, 5);
    public static Compressor compressor = new Compressor(7,5);
    public static Victor intakeVictor = new Victor(1, 10);
    public static Solenoid intakeAngleControllerOne = new Solenoid(1, 3);
    public static Solenoid intakeAngleControllerTwo = new Solenoid(1, 4);
    public static Victor shooterFrontRight = new Victor(1, 5);
    public static Victor shooterBackRight = new Victor(1, 6);
    public static Victor shooterFrontLeft = new Victor(1, 8);
    public static Victor shooterBackLeft = new Victor(1, 7);
    
    public static Solenoid shooterAngleControllerOne = new Solenoid(1, 1);
    public static Solenoid shooterAngleControllerTwo = new Solenoid(1, 2);
    public static Victor frontLeftDrive = new Victor(1, 9);
    public static Victor rearLeftDrive = new Victor(1, 1);
    public static Victor frontRightDrive = new Victor(1, 4);
    public static Victor rearRightDrive = new Victor(1, 3);
    
    public static Encoder DriveEncoderLeft = new Encoder(1, 1, 1, 2, false, EncodingType.k4X);
    public static Gyro DriveGyro = new Gyro(1, 1);
    public static Encoder DriveEncoderRight = new Encoder(1, 3, 1, 4, false, EncodingType.k4X);
    public static AnalogChannel temperature = new AnalogChannel(2);
   // public static Accelerometer DriveAccelerometer = new Accelerometer(1, 2);
    
    /* Vision */
    public static NetworkTable table = NetworkTable.getTable("SmartDashboard");
    // SmartDashboard Interface
    public static SmartDashboardInterface sfxDashboard = new SmartDashboardInterface(table,true);
    
    /* Motor Group Init. */
    public static final MotorGroup driveLeftSide = new MotorGroup(frontLeftDrive, rearLeftDrive);
    public static final MotorGroup driveRightSide = new MotorGroup(frontRightDrive, rearRightDrive);
    
    
    /* Drives */
    public static RobotDrive shooterSystem =  new RobotDrive(shooterFrontLeft, shooterBackLeft,
              shooterFrontRight, shooterBackRight);
    public static RobotDrive RobotDriveTrain = new RobotDrive(driveLeftSide, driveRightSide);
    
    /* System Init */
    public static final IntakeSystem intakeSystem = new IntakeSystem(intakeAngleControllerOne,intakeAngleControllerTwo, intakeVictor); 
    public static final ShooterAngleSystem shooterAngleSystem = new ShooterAngleSystem(shooterAngleControllerOne, shooterAngleControllerTwo);
    
    public static DriveTrain driveTrain = new DriveTrain();
    
    
    
     
	
        
        
    
    public static void init() {
        // Oprate compressor
        compressor.start();

        // Initialize Shooter System drive configuration
        shooterSystemDrive.setSafetyEnabled(false);
        shooterSystemDrive.setExpiration(0.1);
        shooterSystemDrive.setSensitivity(0.5);
        shooterSystemDrive.setMaxOutput(1.0);
        shooterSystemDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        shooterSystemDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        
	// Initialize Robot Drive system
        
       	
        driveSystemRobotDriveTrain.setSafetyEnabled(false);
        driveSystemRobotDriveTrain.setExpiration(0.1);
        driveSystemRobotDriveTrain.setSensitivity(0.5);
        driveSystemRobotDriveTrain.setMaxOutput(1.0);
	// Initialize Encoders
        DriveEncoderLeft.setDistancePerPulse(3.14*4/256);
        DriveEncoderLeft.setPIDSourceParameter(PIDSourceParameter.kDistance);
        DriveEncoderLeft.reset();
        DriveEncoderLeft.start();
        
        DriveEncoderRight.setDistancePerPulse(3.14*4/256);
        DriveEncoderRight.setPIDSourceParameter(PIDSourceParameter.kDistance);
        DriveEncoderRight.reset();
        DriveEncoderRight.start();
        // Gyro
         DriveGyro.setSensitivity(0.007);
         DriveGyro.reset();
        // Accelerometer
	//DriveAccelerometer.setSensitivity(1.0);
        //DriveAccelerometer.setZero(2.5);
       
        
       // Update LiveWindow - This is for Test mode only !!!!!!!!
        LiveWindow.addSensor("Compressor", "compressorSafety", compressorSafety);
        LiveWindow.addActuator("Compressor", "compressorSpike", compressorSpike);
        LiveWindow.addActuator("Intakesystem", "intakeVictor", (Victor) intakeVictor);
        LiveWindow.addActuator("Intakesystem", "intakeAngleControllerOne", intakeAngleControllerOne);
        LiveWindow.addActuator("Intakesystem", "intakeAngleControllerTwo", intakeAngleControllerTwo);
        LiveWindow.addActuator("ShooterSystem", "shooterFrontRight", (Victor) shooterFrontRight);
        LiveWindow.addActuator("ShooterSystem", "shooterBackRight", (Victor) shooterBackRight);
        LiveWindow.addActuator("ShooterSystem", "shooterFrontLeft", (Victor) shooterFrontLeft);
        LiveWindow.addActuator("ShooterSystem", "shooterBackLeft", (Victor) shooterBackLeft);
        
        LiveWindow.addActuator("ShooterAngleSystem", "shooterAngleControllerOne", shooterAngleControllerOne);
        LiveWindow.addActuator("ShooterAngleSystem", "shooterAngleControllerTwo", shooterAngleControllerTwo);
        LiveWindow.addActuator("DriveSystem", "frontLeftDrive", (Victor) frontLeftDrive);
        LiveWindow.addActuator("DriveSystem", "rearLeftDrive", (Victor) rearLeftDrive);
        LiveWindow.addActuator("DriveSystem", "frontRightDrive", (Victor) frontRightDrive);
        LiveWindow.addActuator("DriveSystem", "rearRightDrive", (Victor) rearRightDrive);
        // Sensors
        LiveWindow.addSensor("DriveSystem", "DriveEncoderLeft", DriveEncoderLeft);
        LiveWindow.addSensor("DriveSystem", "DriveEncoderRight", DriveEncoderRight);
        LiveWindow.addSensor("DriveSystem", "DriveGyro", DriveGyro);
        //LiveWindow.addSensor("DriveSystem", "DriveAccelerometer", DriveAccelerometer);
        
    }
}
