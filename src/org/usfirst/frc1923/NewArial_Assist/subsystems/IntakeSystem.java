// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1923.NewArial_Assist.subsystems;

import org.usfirst.frc1923.NewArial_Assist.RobotMap;
import org.usfirst.frc1923.NewArial_Assist.commands.*;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class IntakeSystem extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController intakeVictor = RobotMap.intakeVictor;
    Solenoid intakeAngleControllerOne = RobotMap.intakeAngleControllerOne;
    Solenoid intakeAngleControllerTwo = RobotMap.intakeAngleControllerTwo;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    private final Solenoid pistonControllerOne,pistonControllerTwo; 
    private final Victor intakeMotorController;
    private double intakePower = 1.0;
    
    /**
     * Creates an IntakeSystem with parameters pistonControllerOne, pistonControllerTwo, and motorController
     * 
     * @param pistonControllerOne
     *                          One of Two Solenoid objects that controls the shooter intake angle  
     * @param pistonControllerTwo
     *                          One of Two Solenoid objects that controls the shooter intake angle 
     * @param intakeSpike 
     *                          The Spike which controls the motors on the intake system
     */
    public IntakeSystem(Solenoid pistonControllerOne, Solenoid pistonControllerTwo, Victor intakeSpike){        
        this.pistonControllerOne = pistonControllerOne;
        this.pistonControllerTwo = pistonControllerTwo;
        this.intakeMotorController = intakeSpike;
    }
    
    /**
     * Extends the pistons angling the intake system
     */
    public void activate(){       
        //System.out.println("");
        pistonControllerOne.set(true);
        pistonControllerTwo.set(false);
        
       RobotMap.sfxDashboard.IntakeAngle_Command = true;
       RobotMap.sfxDashboard.IntakePiston_1 = true;
       RobotMap.sfxDashboard.IntakePiston_2 = false;
    }
    
    /**
     * Retracts the piston and thus the Intake system
     */
    public void deactivate(){
        pistonControllerOne.set(false);
        pistonControllerTwo.set(true); 
        
       RobotMap.sfxDashboard.IntakeAngle_Command = false;
       RobotMap.sfxDashboard.IntakePiston_1 = false;
       RobotMap.sfxDashboard.IntakePiston_2 = true;
    }
    
    /**
     * Starts the motors on the Intake system forward
     */
    public void forwardMotor() {
        this.intakeMotorController.set(-intakePower);
        RobotMap.sfxDashboard.IntakeWheel_Command = -intakePower;
         RobotMap.sfxDashboard.Victor_9 = -intakePower;
        
        
    }
    
    /**
     * Starts the motors on the Intake system in reverse
     */
    public void reverseMotor() {
        this.intakeMotorController.set(intakePower);   
        
        RobotMap.sfxDashboard.IntakeWheel_Command = intakePower;
         RobotMap.sfxDashboard.Victor_9 = intakePower;
    }
    
    /**
     * Turns off the motor
     */
    public void deactivateMotor() { 
        this.intakeMotorController.set(0.0);
        this.intakeMotorController.stopMotor();
        
        RobotMap.sfxDashboard.IntakeWheel_Command = 0.0;
         RobotMap.sfxDashboard.Victor_9 = 0.0;
    }
    
    /**
     * Retracts the piston and turns off the motor
     */
    public void stop(){
        this.deactivate();
        intakeMotorController.set(0.0);
        
        RobotMap.sfxDashboard.IntakeWheel_Command = 0.0;
         RobotMap.sfxDashboard.Victor_9 = 0.0;
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}

